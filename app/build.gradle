apply plugin: 'com.android.application'

android {
    compileSdkVersion 34
    namespace 'com.termux'

    defaultConfig {
        applicationId "com.termux"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 118
        versionName "0.118.0-custom"
        ndk {
            abiFilters 'armeabi-v7a'
        }
        multiDexEnabled true
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packagingOptions {
        resources {
            excludes += [
                    'META-INF/DEPENDENCIES',
                    'META-INF/LICENSE',
                    'META-INF/LICENSE.txt',
                    'META-INF/license.txt',
                    'META-INF/NOTICE',
                    'META-INF/NOTICE.txt',
                    'META-INF/notice.txt',
                    'META-INF/ASL2.0',
                    'META-INF/*.kotlin_module'
            ]
        }
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    google()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.annotation:annotation:1.7.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.8.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.0'
    implementation 'androidx.multidex:multidex:2.0.1'
}

// === Custom ARMv7 Build Compatibility Patch ===
// Simplified and limited to ARM 32-bit bootstrap for Android 5–7.

def downloadBootstrap = { arch, expectedChecksum, version ->
    def bootstrapFile = file("${projectDir}/src/main/cpp/bootstrap-${arch}.zip")
    def remoteUrl = "https://github.com/termux/termux-packages/releases/download/bootstrap-${version}/bootstrap-${arch}.zip"
    if (!bootstrapFile.exists()) {
        println("⬇️  Downloading bootstrap for ${arch} from ${remoteUrl}")
        new URL(remoteUrl).withInputStream { i -> bootstrapFile.withOutputStream { it << i } }
    } else {
        println("✅ Bootstrap already exists: ${bootstrapFile}")
    }
    def checksum = bootstrapFile.bytes.encodeHex().toString()
    if (checksum != expectedChecksum) {
        println("⚠️  Warning: Checksum mismatch for " + remoteUrl)
        println("Expected: " + expectedChecksum)
        println("Actual:   " + checksum)
        println("Proceeding anyway for custom build (ARMv7)...")
        // file.delete() // keep file even if mismatch
    }
}

clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

task downloadBootstraps() {
// Disabled bootstrap downloading for custom build
task downloadBootstraps() {
    doLast {
        println "Skipping bootstrap download for custom Termux build (offline mode)."
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        println "Bootstrap download disabled for variant: ${variant.name}"
    }
}
